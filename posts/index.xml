<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 九九</title>
        <link>https://dingjingmaster.github.io/posts/</link>
        <description>所有文章 | 九九</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>dingjing@live.cn (ding jing)</managingEditor>
            <webMaster>dingjing@live.cn (ding jing)</webMaster><lastBuildDate>Tue, 09 May 2023 16:09:47 &#43;0800</lastBuildDate><atom:link href="https://dingjingmaster.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>C&#43;&#43;二进制兼容</title>
    <link>https://dingjingmaster.github.io/2023/05/0014-cc-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%85%BC%E5%AE%B9/</link>
    <pubDate>Tue, 09 May 2023 16:09:47 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2023/05/0014-cc-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%85%BC%E5%AE%B9/</guid>
    <description><![CDATA[什么是二进制兼容 二进制兼容ABI（application binary interface）主要指动态库文件单独升级，现有用到老动态库的应用程序是否受到影]]></description>
</item><item>
    <title>GObject使用——常见宏</title>
    <link>https://dingjingmaster.github.io/2023/04/0004-gobject%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Sun, 16 Apr 2023 10:47:09 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2023/04/0004-gobject%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[GObject 常用宏 G_TYPE_IS_OBJECT(type) 说明：检查传入的类型type是否为G_TYPE_OBJECT或其派生 1 #define G_TYPE_IS_OBJECT(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_OBJECT) G_OBJECT(obj) 说明：将GObject或派生GObject的子]]></description>
</item><item>
    <title>openssl加解密基础</title>
    <link>https://dingjingmaster.github.io/2023/04/0001-%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Sat, 15 Apr 2023 11:10:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2023/04/0001-%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[对称算法 给定一个明文和一个密钥，加密产生密文，其长度和明文大致相同。解密时，使用读密钥与加密密钥相同。 电子密码本模式 Electronic Code Book(ECB) 这种模式是最早采用]]></description>
</item><item>
    <title>GMainLoop</title>
    <link>https://dingjingmaster.github.io/2023/04/0003-gmainloop/</link>
    <pubDate>Fri, 14 Apr 2023 09:04:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2023/04/0003-gmainloop/</guid>
    <description><![CDATA[从g_main_loop_new开始&hellip; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 GMainLoop* g_main_loop_new (GMainContext* context, gboolean is_running) { GMainLoop *loop; if (!context) context = g_main_context_default(); g_main_context_ref (context); loop = g_new0 (GMainLoop, 1); loop-&gt;context = context; loop-&gt;is_running = is_running !=]]></description>
</item><item>
    <title>Qemu与KVM</title>
    <link>https://dingjingmaster.github.io/2023/04/0002-qemu%E4%B8%8Ekvm/</link>
    <pubDate>Thu, 13 Apr 2023 15:31:50 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2023/04/0002-qemu%E4%B8%8Ekvm/</guid>
    <description><![CDATA[虚拟化简介 虚拟化思想 虚拟化的主要思想是，通过分层将底层的复杂、难用的资源虚拟抽象成简单、易用的资源，提供给上层使用。 底层资源或者通过空间的分]]></description>
</item><item>
    <title>Qt 5.11.3编译过程中错误</title>
    <link>https://dingjingmaster.github.io/2023/03/0001-qt-5.11.3%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%94%99%E8%AF%AF/</link>
    <pubDate>Mon, 13 Mar 2023 08:28:17 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2023/03/0001-qt-5.11.3%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%94%99%E8%AF%AF/</guid>
    <description><![CDATA[qrandom.cpp:455:62: error: no matching function for call to ‘std::mersenne_twister_engine 解决方法: 打开 qrandom.cpp 文件，文件编辑器打开后，在220行添加类型声明：t]]></description>
</item><item>
    <title>ncurses API</title>
    <link>https://dingjingmaster.github.io/2023/02/0003-ncurses-api/</link>
    <pubDate>Mon, 06 Feb 2023 22:39:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2023/02/0003-ncurses-api/</guid>
    <description><![CDATA[add_wch 在窗口中添加复杂字符串，然后移动光标 1 2 3 4 5 6 7 8 9 #include &lt;curses.h&gt; int add_wch( const cchar_t *wch ); int wadd_wch( WINDOW *win, const cchar_t *wch ); int mvadd_wch( int y, int x, const cchar_t *wch ); int mvwadd_wch( WINDOW *win, int y, int x, const cchar_t *wch ); int echo_wchar( const cchar_t]]></description>
</item><item>
    <title>ncurses使用中需要明确的点</title>
    <link>https://dingjingmaster.github.io/2023/02/0002-ncurses%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%9C%80%E8%A6%81%E6%98%8E%E7%A1%AE%E7%9A%84%E7%82%B9/</link>
    <pubDate>Sun, 05 Feb 2023 21:44:56 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2023/02/0002-ncurses%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%9C%80%E8%A6%81%E6%98%8E%E7%A1%AE%E7%9A%84%E7%82%B9/</guid>
    <description><![CDATA[ncurses 与 curses ncurses 完全兼容旧的 curses，它们表示同一个函数库 initscr() 初始化终端，清空屏幕，为 当前窗口(stdscr) 和其它数据结构分配内存。 refresh() 对stds]]></description>
</item><item>
    <title>UOS添加菜单项</title>
    <link>https://dingjingmaster.github.io/2023/02/0013-uos%E6%B7%BB%E5%8A%A0%E8%8F%9C%E5%8D%95%E9%A1%B9/</link>
    <pubDate>Sat, 04 Feb 2023 15:16:02 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2023/02/0013-uos%E6%B7%BB%E5%8A%A0%E8%8F%9C%E5%8D%95%E9%A1%B9/</guid>
    <description><![CDATA[需求背景 近来我做的项目需要在 UOS 文件管理器右键菜单添加几个菜单项，后来通过公司找到 UOS 同事，他们提供了两种解决方案给我且都可满足需求。本文接下来]]></description>
</item><item>
    <title>Linux音频体系结构——ALSA</title>
    <link>https://dingjingmaster.github.io/2023/01/0012-alsa/</link>
    <pubDate>Sat, 28 Jan 2023 10:17:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2023/01/0012-alsa/</guid>
    <description><![CDATA[ALSA是什么 ALSA(Advanced Linux Sound Architecture)是linux上主流的音频结构，提供了对音频和MIDI的支持，在没有出现ALSA架构之前，一直使]]></description>
</item></channel>
</rss>
