<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C&#43;&#43; - 标签 - 九九</title>
        <link>https://dingjingmaster.github.io/tags/c&#43;&#43;/</link>
        <description>C&#43;&#43; - 标签 - 九九</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>dingjing@live.cn (ding jing)</managingEditor>
            <webMaster>dingjing@live.cn (ding jing)</webMaster><lastBuildDate>Tue, 09 May 2023 16:09:47 &#43;0800</lastBuildDate><atom:link href="https://dingjingmaster.github.io/tags/c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
    <title>C&#43;&#43;二进制兼容</title>
    <link>https://dingjingmaster.github.io/2023/05/0014-cc-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%85%BC%E5%AE%B9/</link>
    <pubDate>Tue, 09 May 2023 16:09:47 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2023/05/0014-cc-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%85%BC%E5%AE%B9/</guid>
    <description><![CDATA[什么是二进制兼容 二进制兼容ABI（application binary interface）主要指动态库文件单独升级，现有用到老动态库的应用程序是否受到影]]></description>
</item><item>
    <title>防止程序被Hook的方法</title>
    <link>https://dingjingmaster.github.io/2022/11/0012-%E9%98%B2%E6%AD%A2%E7%A8%8B%E5%BA%8F%E8%A2%ABhook%E7%9A%84%E6%96%B9%E6%B3%95/</link>
    <pubDate>Wed, 16 Nov 2022 14:34:21 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2022/11/0012-%E9%98%B2%E6%AD%A2%E7%A8%8B%E5%BA%8F%E8%A2%ABhook%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[最近需要实现一个外发阻断的功能，简单点就是给要外发的程序添加Hook，在外发前做数据检查，检查通过后才允许外发，然而实现过程中才发现，给某个]]></description>
</item><item>
    <title>std::future</title>
    <link>https://dingjingmaster.github.io/2022/09/0011-stdfuture/</link>
    <pubDate>Sat, 10 Sep 2022 21:24:46 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2022/09/0011-stdfuture/</guid>
    <description><![CDATA[功能 类模板std::future提供了一个访问异步操作结果的机制: 异步操作(通过std::async、std::packaged_task或]]></description>
</item><item>
    <title>C&#43;&#43;11智能指针</title>
    <link>https://dingjingmaster.github.io/2022/08/0009-c-11%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
    <pubDate>Mon, 29 Aug 2022 14:33:42 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2022/08/0009-c-11%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
    <description><![CDATA[智能指针的作用 在使用C/C++时候，使用指针理由之一就是希望变量在需要的时候突破作用域边界的限制。然而，实际使用中，确保“指针的寿命”和“其]]></description>
</item><item>
    <title>gRPC C&#43;&#43; 例子</title>
    <link>https://dingjingmaster.github.io/2022/08/0007-grpc-c-hello-world/</link>
    <pubDate>Mon, 01 Aug 2022 22:31:15 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2022/08/0007-grpc-c-hello-world/</guid>
    <description><![CDATA[说明 gRPC 是一款好用的 RPC 框架，它使用 protobuf 做为接口定义和底层消息交换格式。 使用 gRPC，一个客户端程序可以直接调用另一台机器上服务端程序的方法，这使]]></description>
</item><item>
    <title>高效的序列化、反序列化工具——ProtoBuf</title>
    <link>https://dingjingmaster.github.io/2022/07/0006-%E9%AB%98%E6%95%88%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7protocol-buffers/</link>
    <pubDate>Thu, 21 Jul 2022 23:01:45 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2022/07/0006-%E9%AB%98%E6%95%88%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7protocol-buffers/</guid>
    <description><![CDATA[ProtoBuf 简介 ProtoBuf(Protocol Buffers) 是 Google 用于实现序列化与反序列化的开源项目，支持多语言、跨平台、可扩展的用于结构化数据的解决方案。 目前常见的序列化、反序列化方法包括但]]></description>
</item><item>
    <title>现代c&#43;&#43;</title>
    <link>https://dingjingmaster.github.io/2022/06/0003-%E7%8E%B0%E4%BB%A3c-/</link>
    <pubDate>Wed, 01 Jun 2022 08:01:52 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2022/06/0003-%E7%8E%B0%E4%BB%A3c-/</guid>
    <description><![CDATA[现代C++，快速上手 C++11、C++14、C++17、C++20 概述 C++98 是C++第一个版本 C++98 之后积累十年出现 C++11 C++14/17 对C++11做了重要补充和优]]></description>
</item><item>
    <title>C语言</title>
    <link>https://dingjingmaster.github.io/2022/05/0002-c%E8%AF%AD%E8%A8%80/</link>
    <pubDate>Sat, 14 May 2022 21:13:42 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2022/05/0002-c%E8%AF%AD%E8%A8%80/</guid>
    <description><![CDATA[C语言 C是一种通用的、命令式的计算机编程语言，支持结构化编程、词法变量作用域和递归，而静态类型系统可以防止许多意想不到的操作。通过设计，C提]]></description>
</item><item>
    <title>设计模式</title>
    <link>https://dingjingmaster.github.io/2021/09/0010-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 19 Sep 2021 09:37:37 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2021/09/0010-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[设计模式简介 设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。 使用设计模式是为了重用代码、让代码更容易被他人理解]]></description>
</item><item>
    <title>fpic与fpie</title>
    <link>https://dingjingmaster.github.io/2021/02/0013-fpic%E4%B8%8Efpie/</link>
    <pubDate>Tue, 16 Feb 2021 14:32:10 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://dingjingmaster.github.io/2021/02/0013-fpic%E4%B8%8Efpie/</guid>
    <description><![CDATA[fPIC/fpic -fPIC与-fpic都是在编译时加入的选项，用于生成位置无关的代码(Position-Independent-Code)，可以使得动态库]]></description>
</item></channel>
</rss>
